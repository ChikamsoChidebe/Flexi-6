{"ast":null,"code":"// API Service - Demonstrates Promise handling and async/await\nconst API_BASE = 'https://jsonplaceholder.typicode.com';\n\n// Using Promises - Traditional approach\nexport const fetchUsersWithPromises = () => {\n  return fetch(`${API_BASE}/users`).then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response.json();\n  }).catch(error => {\n    console.error('Promise-based fetch error:', error);\n    throw error;\n  });\n};\n\n// Using Async/Await - Modern approach\nexport const fetchUsersWithAsync = async () => {\n  try {\n    const response = await fetch(`${API_BASE}/users`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Async/await fetch error:', error);\n    throw error;\n  }\n};\n\n// Create user with form data - Async/Await with POST\nexport const createUser = async userData => {\n  try {\n    const response = await fetch(`${API_BASE}/users`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to create user: ${response.status}`);\n    }\n    const newUser = await response.json();\n    return newUser;\n  } catch (error) {\n    console.error('Create user error:', error);\n    throw error;\n  }\n};\n\n// Simulate network delay for demo purposes\nexport const delay = ms => new Promise(resolve => setTimeout(resolve, ms));","map":{"version":3,"names":["API_BASE","fetchUsersWithPromises","fetch","then","response","ok","Error","status","json","catch","error","console","fetchUsersWithAsync","data","createUser","userData","method","headers","body","JSON","stringify","newUser","delay","ms","Promise","resolve","setTimeout"],"sources":["C:/Users/HP/Desktop/Flexi-6/src/services/api.js"],"sourcesContent":["// API Service - Demonstrates Promise handling and async/await\nconst API_BASE = 'https://jsonplaceholder.typicode.com';\n\n// Using Promises - Traditional approach\nexport const fetchUsersWithPromises = () => {\n  return fetch(`${API_BASE}/users`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    })\n    .catch(error => {\n      console.error('Promise-based fetch error:', error);\n      throw error;\n    });\n};\n\n// Using Async/Await - Modern approach\nexport const fetchUsersWithAsync = async () => {\n  try {\n    const response = await fetch(`${API_BASE}/users`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Async/await fetch error:', error);\n    throw error;\n  }\n};\n\n// Create user with form data - Async/Await with POST\nexport const createUser = async (userData) => {\n  try {\n    const response = await fetch(`${API_BASE}/users`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(userData)\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to create user: ${response.status}`);\n    }\n    \n    const newUser = await response.json();\n    return newUser;\n  } catch (error) {\n    console.error('Create user error:', error);\n    throw error;\n  }\n};\n\n// Simulate network delay for demo purposes\nexport const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,sCAAsC;;AAEvD;AACA,OAAO,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;EAC1C,OAAOC,KAAK,CAAC,GAAGF,QAAQ,QAAQ,CAAC,CAC9BG,IAAI,CAACC,QAAQ,IAAI;IAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBF,QAAQ,CAACG,MAAM,EAAE,CAAC;IAC3D;IACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb,CAAC,CAAC;AACN,CAAC;;AAED;AACA,OAAO,MAAME,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7C,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMF,KAAK,CAAC,GAAGF,QAAQ,QAAQ,CAAC;IACjD,IAAI,CAACI,QAAQ,CAACC,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBF,QAAQ,CAACG,MAAM,EAAE,CAAC;IAC3D;IACA,MAAMM,IAAI,GAAG,MAAMT,QAAQ,CAACI,IAAI,CAAC,CAAC;IAClC,OAAOK,IAAI;EACb,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,UAAU,GAAG,MAAOC,QAAQ,IAAK;EAC5C,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMF,KAAK,CAAC,GAAGF,QAAQ,QAAQ,EAAE;MAChDgB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;IAC/B,CAAC,CAAC;IAEF,IAAI,CAACX,QAAQ,CAACC,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0BF,QAAQ,CAACG,MAAM,EAAE,CAAC;IAC9D;IAEA,MAAMc,OAAO,GAAG,MAAMjB,QAAQ,CAACI,IAAI,CAAC,CAAC;IACrC,OAAOa,OAAO;EAChB,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMY,KAAK,GAAIC,EAAE,IAAK,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}